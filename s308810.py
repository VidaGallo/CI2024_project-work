import numpy as np


def f1(x: np.ndarray) -> np.ndarray: 
    return  np.sin(x[0])                 
            #sin(x_1)


def f2(x: np.ndarray) -> np.ndarray: 
    return ((x[0] + (x[1] * np.sin(57.176))) * ((((x[0] * (-69.689)))**2 * ((5.9695 * 0.1291) - (x[0] * (x[1] * np.sin(0.7147))))) + 1077248.0))
         #((x_1 + (x_2 * sin(57.176))) * ((**2((x_1 * -69.689)) * ((5.9695 * 0.1291) - (x_1 * (x_2 * sin(0.7147))))) - -1077248.0))



def f3(x: np.ndarray) -> np.ndarray: 
    return ((x[0] * x[0]) - (((x[2] * 2.7713) + ((x[2] + -4.0) - (x[0])**2)) + (x[1])**3))
           #((x_1 * x_1) - (((x_3 * 2.7713) + ((x_3 + -4.0) - **2(x_1))) + **3(x_2))) 


def f4(x: np.ndarray) -> np.ndarray:               
    return  (np.cos(x[1]) + np.cos(x[1]))  +  (((np.cos(x[1]) + np.cos(x[1])) + (2.5831 + (np.cos(x[1]) + np.cos(-5.5859)))) + (np.cos(x[1]) + np.cos(x[1])))               
            #(cos(x_2) + cos(x_2)) + (((cos(x_2) + cos(x_2)) + (2.5831 + (cos(x_2) + cos(-5.5859)))) + (cos(x_2) + cos(x_2)))


def f5(x: np.ndarray) -> np.ndarray: 
    return (x[0] * -1.7161875e-13)*(((-3.538 + x[1]) + x[1]) * ((((((x[0] + -3.538) + x[1]) + x[1]) + (((x[0] + -3.538) + x[1]))**2) + x[1]))**2)
          #((x_1 * -1.7161875e-13) * (((-3.538 + x_2) + x_2) * **2((((((x_1 + -3.538) + x_2) + x_2) + **2(((x_1 + -3.538) + x_2))) + x_2))))


def f6(x: np.ndarray) -> np.ndarray: 
    return  0.6983 * x[1] - (-0.1425 * (x[0] + x[0])) + x[1] - (-0.052744) - x[0]       
            # (((((0.6983 * x_2) - (-0.1425 * (x_1 + x_1))) + x_2) - -0.052744) - x_1)


def f7(x: np.ndarray) -> np.ndarray:  
    return  np.exp((((x[0] * x[1]) - (-0.8597)**3)) - (-0.8597))
            #exp((((x_1 * x_2) - **3(-0.8597)) - sqrt(-0.8597)))
    

    #return np.exp((x[1] * x[0])) * (np.sqrt(4.5209))**2       
        #exp((x_2 * x_1)) * **2(sqrt(4.5209))
        
    #return np.exp((x[1] * x[0])) * (2.6495-0.0012*(x[0] * x[1]))**2
            #(exp((x_2 * x_1)) * **2(2.6495+-0.0012*(x_1 * x_2)))



def f8(x: np.ndarray) -> np.ndarray: 
    return (((x[3]) + (1889.6951 * x[5])) - ((np.sin(x[5])) + (1806.6488 * np.sin(x[5])))) + ((21.7404 * np.cos(x[4]))**2 + ((487.5736 * x[5]) * np.cos(x[5])) - (1000.9348 * (np.sin(x[5]) * np.cos(x[5])))) - (-811.453 * np.sin(x[5]) - (x[2] + 8.057))
         #(((x_4) + (1889.6951 * x_6)) - ((sin(x_4)) + (1806.6488 * sin(x_6)))) + (**2((21.7404 * cos(x_5))) + ((487.5736 * x_6) * cos(x_6)) - (1000.9348 * (sin(x_6) * cos(x_6)))) - (-811.453 * sin(x_6) - (x_3 - -8.057))

       
    #return ((149.572 * (x[5])**3) + ((x[1] - ((x[5] * x[0]) * (x[5] + x[0]))) - ((((((0.5575 + x[4]) - 2*(x[3])) + ((x[0] - x[1]) / (0.632))) - (((x[0] + x[4]) + (x[1] - x[0])) - ((x[4] * x[4]))**2)) - ((((x[1] * x[4]) - (x[4])**2) - ((x[2] + x[1]) + (x[5] - x[0]))) - (((x[5] + x[0]) * (x[2] + x[5])) + ((x[3] - x[1]) - (x[5] * x[1]))))) + 644.5600)))
        #((**3(x_6) * 149.572) + ((x_2 - ((x_6 * x_1) * (x_6 + x_1))) - ((((((0.5575 + x_5) - (x_4 + x_6)) + ((x_1 - x_2) / (0.306 - -0.326))) - (((x_1 + x_5) + (x_2 - x_1)) - **2((x_5 * x_5)))) - ((((x_2 * x_5) - **2(x_5)) - ((x_3 + ((((x_3 / 0.0523) - (x_4 + 5.3989)) - ((x_6 + -6.6359) * (6.8468 * x_6))) - ((**2(-6.5201) - (3.1437 + x_5)) - ((-0.8931 * x_6) * x_2)))) + (x_6 - x_1))) - (((7.6163 + x_1) * (x_3 + x_6)) + ((x_4 - x_2) - (x_6 * x_2))))) - -644.5600000000001)))

    
    
    
    
    #return (((x[0])**2 - (x[1])**3) - (-13.94 + (((x[2] * 4.3197) * 0.6561) + 2.2772)))
            #((**2(x_1) - **3(x_2)) - (-13.94 + (((x_3 * 4.3197) * sqrt(0.6561)) + 2.2772)))


    #return ((x[0])**2 - (x[1])**3) - (((np.sqrt(0.7597) * (x[2] * 3.9445)) + 2.2772) -13.94)
            #((**2(x_1) - **3(x_2)) - (((sqrt(0.7597) * (x_3 * 3.9445)) + 2.2772) + -13.94))
